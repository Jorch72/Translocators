package codechicken.translocators.init;

import codechicken.lib.texture.TextureUtils.IIconRegister;
import codechicken.lib.util.ArrayUtils;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.util.ResourceLocation;

/**
 * Created by covers1624 on 14/11/2017.
 */
public class TranslocatorTextures implements IIconRegister {

    public static TextureAtlasSprite[] ITEM_ICONS = new TextureAtlasSprite[64];
    public static TextureAtlasSprite[] FLUID_ICONS = new TextureAtlasSprite[64];
    public static TextureAtlasSprite[][] TEXTURES;
    public static TextureAtlasSprite missing;

    private static final String BLOCKS_ = "translocators:blocks/";
    private static final String TRANSLOCATOR_ = BLOCKS_ + "translocator/";
    private static final String ITEM_ = TRANSLOCATOR_ + "item/";
    private static final String FLUID_ = TRANSLOCATOR_ + "fluid/";

    private static TextureMap textureMap;

    @Override
    public void registerIcons(TextureMap map) {
        textureMap = map;
        missing = register(TRANSLOCATOR_ + "debug");
        ArrayUtils.fillArray(ITEM_ICONS, missing);
        ArrayUtils.fillArray(FLUID_ICONS, missing);

        //These were auto generated by: name_textures.py
        //See https://github.com/covers1624/TextureSheetExporter/wiki
        //@formatter:off
        ITEM_ICONS [0x00]                      = register(ITEM_ + "item_00_0_0_00");
        ITEM_ICONS [0x01]                      = register(ITEM_ + "item_10_0_0_00");
        ITEM_ICONS [0x02 | 0x08]               = register(ITEM_ + "item_11_0_1_00");
        ITEM_ICONS [0x04 | 0x08]               = register(ITEM_ + "item_00_1_1_00");
        ITEM_ICONS [0x01 | 0x04 | 0x08]        = register(ITEM_ + "item_10_1_1_00");
        ITEM_ICONS [0x02 | 0x04 | 0x08]        = register(ITEM_ + "item_11_1_1_00");
        ITEM_ICONS [0x10]                      = register(ITEM_ + "item_00_0_0_10");
        ITEM_ICONS [0x01 | 0x10]               = register(ITEM_ + "item_10_0_0_10");
        ITEM_ICONS [0x02 | 0x10]               = register(ITEM_ + "item_11_0_0_10");
        ITEM_ICONS [0x02]                      = register(ITEM_ + "item_11_0_0_00");
        ITEM_ICONS [0x04 | 0x10]               = register(ITEM_ + "item_00_1_0_10");
        ITEM_ICONS [0x01 | 0x04 | 0x10]        = register(ITEM_ + "item_10_1_0_10");
        ITEM_ICONS [0x02 | 0x04 | 0x10]        = register(ITEM_ + "item_11_1_0_10");
        ITEM_ICONS [0x08 | 0x10]               = register(ITEM_ + "item_00_0_1_10");
        ITEM_ICONS [0x01 | 0x08 | 0x10]        = register(ITEM_ + "item_10_0_1_10");
        ITEM_ICONS [0x02 | 0x08 | 0x10]        = register(ITEM_ + "item_11_0_1_10");
        ITEM_ICONS [0x04 | 0x08 | 0x10]        = register(ITEM_ + "item_00_1_1_10");
        ITEM_ICONS [0x01 | 0x04 | 0x08 | 0x10] = register(ITEM_ + "item_10_1_1_10");
        ITEM_ICONS [0x02 | 0x04 | 0x08 | 0x10] = register(ITEM_ + "item_11_1_1_10");
        ITEM_ICONS [0x20]                      = register(ITEM_ + "item_00_0_0_11");
        ITEM_ICONS [0x01 | 0x20]               = register(ITEM_ + "item_10_0_0_11");
        ITEM_ICONS [0x02 | 0x20]               = register(ITEM_ + "item_11_0_0_11");
        ITEM_ICONS [0x04 | 0x20]               = register(ITEM_ + "item_00_1_0_11");
        ITEM_ICONS [0x01 | 0x04 | 0x20]        = register(ITEM_ + "item_10_1_0_11");
        ITEM_ICONS [0x02 | 0x04 | 0x20]        = register(ITEM_ + "item_11_1_0_11");
        ITEM_ICONS [0x04]                      = register(ITEM_ + "item_00_1_0_00");
        ITEM_ICONS [0x08 | 0x20]               = register(ITEM_ + "item_00_0_1_11");
        ITEM_ICONS [0x01 | 0x08 | 0x20]        = register(ITEM_ + "item_10_0_1_11");
        ITEM_ICONS [0x02 | 0x08 | 0x20]        = register(ITEM_ + "item_11_0_1_11");
        ITEM_ICONS [0x04 | 0x08 | 0x20]        = register(ITEM_ + "item_00_1_1_11");
        ITEM_ICONS [0x01 | 0x04 | 0x08 | 0x20] = register(ITEM_ + "item_10_1_1_11");
        ITEM_ICONS [0x02 | 0x04 | 0x08 | 0x20] = register(ITEM_ + "item_11_1_1_11");
        ITEM_ICONS [0x01 | 0x04]               = register(ITEM_ + "item_10_1_0_00");
        ITEM_ICONS [0x02 | 0x04]               = register(ITEM_ + "item_11_1_0_00");
        ITEM_ICONS [0x08]                      = register(ITEM_ + "item_00_0_1_00");
        ITEM_ICONS [0x01 | 0x08]               = register(ITEM_ + "item_10_0_1_00");
        FLUID_ICONS[0x00]                      = register(FLUID_ + "fluid_00_0_0_00");
        FLUID_ICONS[0x01]                      = register(FLUID_ + "fluid_10_0_0_00");
        FLUID_ICONS[0x02 | 0x08]               = register(FLUID_ + "fluid_11_0_1_00");
        FLUID_ICONS[0x04 | 0x08]               = register(FLUID_ + "fluid_00_1_1_00");
        FLUID_ICONS[0x01 | 0x04 | 0x08]        = register(FLUID_ + "fluid_10_1_1_00");
        FLUID_ICONS[0x02 | 0x04 | 0x08]        = register(FLUID_ + "fluid_11_1_1_00");
        FLUID_ICONS[0x10]                      = register(FLUID_ + "fluid_00_0_0_10");
        FLUID_ICONS[0x01 | 0x10]               = register(FLUID_ + "fluid_10_0_0_10");
        FLUID_ICONS[0x02 | 0x10]               = register(FLUID_ + "fluid_11_0_0_10");
        FLUID_ICONS[0x02]                      = register(FLUID_ + "fluid_11_0_0_00");
        FLUID_ICONS[0x04 | 0x10]               = register(FLUID_ + "fluid_00_1_0_10");
        FLUID_ICONS[0x01 | 0x04 | 0x10]        = register(FLUID_ + "fluid_10_1_0_10");
        FLUID_ICONS[0x02 | 0x04 | 0x10]        = register(FLUID_ + "fluid_11_1_0_10");
        FLUID_ICONS[0x08 | 0x10]               = register(FLUID_ + "fluid_00_0_1_10");
        FLUID_ICONS[0x01 | 0x08 | 0x10]        = register(FLUID_ + "fluid_10_0_1_10");
        FLUID_ICONS[0x02 | 0x08 | 0x10]        = register(FLUID_ + "fluid_11_0_1_10");
        FLUID_ICONS[0x04 | 0x08 | 0x10]        = register(FLUID_ + "fluid_00_1_1_10");
        FLUID_ICONS[0x01 | 0x04 | 0x08 | 0x10] = register(FLUID_ + "fluid_10_1_1_10");
        FLUID_ICONS[0x02 | 0x04 | 0x08 | 0x10] = register(FLUID_ + "fluid_11_1_1_10");
        FLUID_ICONS[0x20]                      = register(FLUID_ + "fluid_00_0_0_11");
        FLUID_ICONS[0x01 | 0x20]               = register(FLUID_ + "fluid_10_0_0_11");
        FLUID_ICONS[0x02 | 0x20]               = register(FLUID_ + "fluid_11_0_0_11");
        FLUID_ICONS[0x04 | 0x20]               = register(FLUID_ + "fluid_00_1_0_11");
        FLUID_ICONS[0x01 | 0x04 | 0x20]        = register(FLUID_ + "fluid_10_1_0_11");
        FLUID_ICONS[0x02 | 0x04 | 0x20]        = register(FLUID_ + "fluid_11_1_0_11");
        FLUID_ICONS[0x04]                      = register(FLUID_ + "fluid_00_1_0_00");
        FLUID_ICONS[0x08 | 0x20]               = register(FLUID_ + "fluid_00_0_1_11");
        FLUID_ICONS[0x01 | 0x08 | 0x20]        = register(FLUID_ + "fluid_10_0_1_11");
        FLUID_ICONS[0x02 | 0x08 | 0x20]        = register(FLUID_ + "fluid_11_0_1_11");
        FLUID_ICONS[0x04 | 0x08 | 0x20]        = register(FLUID_ + "fluid_00_1_1_11");
        FLUID_ICONS[0x01 | 0x04 | 0x08 | 0x20] = register(FLUID_ + "fluid_10_1_1_11");
        FLUID_ICONS[0x02 | 0x04 | 0x08 | 0x20] = register(FLUID_ + "fluid_11_1_1_11");
        FLUID_ICONS[0x01 | 0x04]               = register(FLUID_ + "fluid_10_1_0_00");
        FLUID_ICONS[0x02 | 0x04]               = register(FLUID_ + "fluid_11_1_0_00");
        FLUID_ICONS[0x08]                      = register(FLUID_ + "fluid_00_0_1_00");
        FLUID_ICONS[0x01 | 0x08]               = register(FLUID_ + "fluid_10_0_1_00");
        //@formatter:on

        TEXTURES = new TextureAtlasSprite[][] { ITEM_ICONS, FLUID_ICONS };

    }

    private static TextureAtlasSprite register(String sprite) {
        return textureMap.registerSprite(new ResourceLocation(sprite));
    }

}
